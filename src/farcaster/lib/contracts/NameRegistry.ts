/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export interface NameRegistryInterface extends utils.Interface {
  contractName: 'NameRegistry'
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'bid(address,uint256,address)': FunctionFragment
    'cancelRecovery(uint256)': FunctionFragment
    'changeFee(uint256)': FunctionFragment
    'changePool(address)': FunctionFragment
    'changeRecoveryAddress(uint256,address)': FunctionFragment
    'changeTrustedCaller(address)': FunctionFragment
    'changeVault(address)': FunctionFragment
    'completeRecovery(uint256)': FunctionFragment
    'disableTrustedOnly()': FunctionFragment
    'expiryOf(uint256)': FunctionFragment
    'fee()': FunctionFragment
    'generateCommit(bytes16,address,bytes32,address)': FunctionFragment
    'getApproved(uint256)': FunctionFragment
    'getRoleAdmin(bytes32)': FunctionFragment
    'grantRole(bytes32,address)': FunctionFragment
    'hasRole(bytes32,address)': FunctionFragment
    'initialize(string,string,address,address)': FunctionFragment
    'isApprovedForAll(address,address)': FunctionFragment
    'isTrustedForwarder(address)': FunctionFragment
    'makeCommit(bytes32)': FunctionFragment
    'name()': FunctionFragment
    'ownerOf(uint256)': FunctionFragment
    'pause()': FunctionFragment
    'paused()': FunctionFragment
    'pool()': FunctionFragment
    'proxiableUUID()': FunctionFragment
    'reclaim(uint256)': FunctionFragment
    'recoveryClockOf(uint256)': FunctionFragment
    'recoveryDestinationOf(uint256)': FunctionFragment
    'recoveryOf(uint256)': FunctionFragment
    'register(bytes16,address,bytes32,address)': FunctionFragment
    'renew(uint256)': FunctionFragment
    'renounceRole(bytes32,address)': FunctionFragment
    'requestRecovery(uint256,address)': FunctionFragment
    'revokeRole(bytes32,address)': FunctionFragment
    'safeTransferFrom(address,address,uint256)': FunctionFragment
    'setApprovalForAll(address,bool)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'symbol()': FunctionFragment
    'timestampOf(bytes32)': FunctionFragment
    'tokenURI(uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'trustedCaller()': FunctionFragment
    'trustedOnly()': FunctionFragment
    'trustedRegister(bytes16,address,address,uint256,uint256)': FunctionFragment
    'unpause()': FunctionFragment
    'upgradeTo(address)': FunctionFragment
    'upgradeToAndCall(address,bytes)': FunctionFragment
    'vault()': FunctionFragment
    'withdraw(uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(
    functionFragment: 'bid',
    values: [string, BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'cancelRecovery',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'changeFee',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'changePool', values: [string]): string
  encodeFunctionData(
    functionFragment: 'changeRecoveryAddress',
    values: [BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'changeTrustedCaller',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'changeVault', values: [string]): string
  encodeFunctionData(
    functionFragment: 'completeRecovery',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'disableTrustedOnly',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'expiryOf',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'fee', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'generateCommit',
    values: [BytesLike, string, BytesLike, string]
  ): string
  encodeFunctionData(
    functionFragment: 'getApproved',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getRoleAdmin',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(
    functionFragment: 'hasRole',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'isTrustedForwarder',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'makeCommit',
    values: [BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'ownerOf',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(functionFragment: 'pool', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'proxiableUUID',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'reclaim',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'recoveryClockOf',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'recoveryDestinationOf',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'recoveryOf',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'register',
    values: [BytesLike, string, BytesLike, string]
  ): string
  encodeFunctionData(functionFragment: 'renew', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(
    functionFragment: 'requestRecovery',
    values: [BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [string, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'timestampOf',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'tokenURI',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'trustedCaller',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'trustedOnly',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'trustedRegister',
    values: [BytesLike, string, string, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string
  encodeFunctionData(functionFragment: 'upgradeTo', values: [string]): string
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [string, BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'vault', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'DEFAULT_ADMIN_ROLE',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'bid', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'cancelRecovery',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'changeFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'changePool', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'changeRecoveryAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'changeTrustedCaller',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'changeVault', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'completeRecovery',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'disableTrustedOnly',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'expiryOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'fee', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'generateCommit',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getRoleAdmin',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isApprovedForAll',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'isTrustedForwarder',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'makeCommit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pool', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'proxiableUUID',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'reclaim', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'recoveryClockOf',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'recoveryDestinationOf',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'recoveryOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'register', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renew', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceRole',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'requestRecovery',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setApprovalForAll',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'timestampOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'trustedCaller',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'trustedOnly', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'trustedRegister',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'upgradeToAndCall',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'vault', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'AdminChanged(address,address)': EventFragment
    'Approval(address,address,uint256)': EventFragment
    'ApprovalForAll(address,address,bool)': EventFragment
    'BeaconUpgraded(address)': EventFragment
    'CancelRecovery(address,uint256)': EventFragment
    'ChangeFee(uint256)': EventFragment
    'ChangePool(address)': EventFragment
    'ChangeRecoveryAddress(uint256,address)': EventFragment
    'ChangeTrustedCaller(address)': EventFragment
    'ChangeVault(address)': EventFragment
    'DisableTrustedOnly()': EventFragment
    'Initialized(uint8)': EventFragment
    'Invite(uint256,uint256,bytes16)': EventFragment
    'Paused(address)': EventFragment
    'Renew(uint256,uint256)': EventFragment
    'RequestRecovery(address,address,uint256)': EventFragment
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
    'RoleGranted(bytes32,address,address)': EventFragment
    'RoleRevoked(bytes32,address,address)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Unpaused(address)': EventFragment
    'Upgraded(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CancelRecovery'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ChangeFee'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ChangePool'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ChangeRecoveryAddress'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ChangeTrustedCaller'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ChangeVault'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DisableTrustedOnly'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Invite'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Renew'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RequestRecovery'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>

export type CancelRecoveryEvent = TypedEvent<
  [string, BigNumber],
  { by: string; tokenId: BigNumber }
>

export type CancelRecoveryEventFilter = TypedEventFilter<CancelRecoveryEvent>

export type ChangeFeeEvent = TypedEvent<[BigNumber], { fee: BigNumber }>

export type ChangeFeeEventFilter = TypedEventFilter<ChangeFeeEvent>

export type ChangePoolEvent = TypedEvent<[string], { pool: string }>

export type ChangePoolEventFilter = TypedEventFilter<ChangePoolEvent>

export type ChangeRecoveryAddressEvent = TypedEvent<
  [BigNumber, string],
  { tokenId: BigNumber; recovery: string }
>

export type ChangeRecoveryAddressEventFilter =
  TypedEventFilter<ChangeRecoveryAddressEvent>

export type ChangeTrustedCallerEvent = TypedEvent<
  [string],
  { trustedCaller: string }
>

export type ChangeTrustedCallerEventFilter =
  TypedEventFilter<ChangeTrustedCallerEvent>

export type ChangeVaultEvent = TypedEvent<[string], { vault: string }>

export type ChangeVaultEventFilter = TypedEventFilter<ChangeVaultEvent>

export type DisableTrustedOnlyEvent = TypedEvent<[], {}>

export type DisableTrustedOnlyEventFilter =
  TypedEventFilter<DisableTrustedOnlyEvent>

export type InitializedEvent = TypedEvent<[number], { version: number }>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export type InviteEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { inviterId: BigNumber; inviteeId: BigNumber; fname: string }
>

export type InviteEventFilter = TypedEventFilter<InviteEvent>

export type PausedEvent = TypedEvent<[string], { account: string }>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export type RenewEvent = TypedEvent<
  [BigNumber, BigNumber],
  { tokenId: BigNumber; expiry: BigNumber }
>

export type RenewEventFilter = TypedEventFilter<RenewEvent>

export type RequestRecoveryEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>

export type RequestRecoveryEventFilter = TypedEventFilter<RequestRecoveryEvent>

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export type UnpausedEvent = TypedEvent<[string], { account: string }>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>

export interface NameRegistry extends BaseContract {
  contractName: 'NameRegistry'
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: NameRegistryInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>

    bid(
      to: string,
      tokenId: BigNumberish,
      recovery: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    cancelRecovery(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    changeFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    changePool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    changeRecoveryAddress(
      tokenId: BigNumberish,
      recovery: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    changeTrustedCaller(
      _trustedCaller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    changeVault(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    completeRecovery(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    disableTrustedOnly(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    expiryOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    fee(overrides?: CallOverrides): Promise<[BigNumber]>

    generateCommit(
      fname: BytesLike,
      to: string,
      secret: BytesLike,
      recovery: string,
      overrides?: CallOverrides
    ): Promise<[string] & { commit: string }>

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    initialize(
      _tokenName: string,
      _tokenSymbol: string,
      _vault: string,
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    makeCommit(
      commit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<[string]>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    pool(overrides?: CallOverrides): Promise<[string]>

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>

    reclaim(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    recoveryClockOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    recoveryDestinationOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    recoveryOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    register(
      fname: BytesLike,
      to: string,
      secret: BytesLike,
      recovery: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    renew(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    requestRecovery(
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    symbol(overrides?: CallOverrides): Promise<[string]>

    timestampOf(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    trustedCaller(overrides?: CallOverrides): Promise<[string]>

    trustedOnly(overrides?: CallOverrides): Promise<[BigNumber]>

    trustedRegister(
      fname: BytesLike,
      to: string,
      recovery: string,
      inviter: BigNumberish,
      invitee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    vault(overrides?: CallOverrides): Promise<[string]>

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

  bid(
    to: string,
    tokenId: BigNumberish,
    recovery: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  cancelRecovery(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  changeFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  changePool(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  changeRecoveryAddress(
    tokenId: BigNumberish,
    recovery: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  changeTrustedCaller(
    _trustedCaller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  changeVault(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  completeRecovery(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  disableTrustedOnly(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  expiryOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  fee(overrides?: CallOverrides): Promise<BigNumber>

  generateCommit(
    fname: BytesLike,
    to: string,
    secret: BytesLike,
    recovery: string,
    overrides?: CallOverrides
  ): Promise<string>

  getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  initialize(
    _tokenName: string,
    _tokenSymbol: string,
    _vault: string,
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  makeCommit(
    commit: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  pool(overrides?: CallOverrides): Promise<string>

  proxiableUUID(overrides?: CallOverrides): Promise<string>

  reclaim(
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  recoveryClockOf(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  recoveryDestinationOf(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  recoveryOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  register(
    fname: BytesLike,
    to: string,
    secret: BytesLike,
    recovery: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  renew(
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  requestRecovery(
    tokenId: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'safeTransferFrom(address,address,uint256)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>

  symbol(overrides?: CallOverrides): Promise<string>

  timestampOf(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  trustedCaller(overrides?: CallOverrides): Promise<string>

  trustedOnly(overrides?: CallOverrides): Promise<BigNumber>

  trustedRegister(
    fname: BytesLike,
    to: string,
    recovery: string,
    inviter: BigNumberish,
    invitee: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  vault(overrides?: CallOverrides): Promise<string>

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    bid(
      to: string,
      tokenId: BigNumberish,
      recovery: string,
      overrides?: CallOverrides
    ): Promise<void>

    cancelRecovery(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    changeFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>

    changePool(_pool: string, overrides?: CallOverrides): Promise<void>

    changeRecoveryAddress(
      tokenId: BigNumberish,
      recovery: string,
      overrides?: CallOverrides
    ): Promise<void>

    changeTrustedCaller(
      _trustedCaller: string,
      overrides?: CallOverrides
    ): Promise<void>

    changeVault(_vault: string, overrides?: CallOverrides): Promise<void>

    completeRecovery(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    disableTrustedOnly(overrides?: CallOverrides): Promise<void>

    expiryOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    fee(overrides?: CallOverrides): Promise<BigNumber>

    generateCommit(
      fname: BytesLike,
      to: string,
      secret: BytesLike,
      recovery: string,
      overrides?: CallOverrides
    ): Promise<string>

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    initialize(
      _tokenName: string,
      _tokenSymbol: string,
      _vault: string,
      _pool: string,
      overrides?: CallOverrides
    ): Promise<void>

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    makeCommit(commit: BytesLike, overrides?: CallOverrides): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    pause(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    pool(overrides?: CallOverrides): Promise<string>

    proxiableUUID(overrides?: CallOverrides): Promise<string>

    reclaim(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>

    recoveryClockOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    recoveryDestinationOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    recoveryOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    register(
      fname: BytesLike,
      to: string,
      secret: BytesLike,
      recovery: string,
      overrides?: CallOverrides
    ): Promise<void>

    renew(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>

    requestRecovery(
      tokenId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>

    symbol(overrides?: CallOverrides): Promise<string>

    timestampOf(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    trustedCaller(overrides?: CallOverrides): Promise<string>

    trustedOnly(overrides?: CallOverrides): Promise<BigNumber>

    trustedRegister(
      fname: BytesLike,
      to: string,
      recovery: string,
      inviter: BigNumberish,
      invitee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    unpause(overrides?: CallOverrides): Promise<void>

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    vault(overrides?: CallOverrides): Promise<string>

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'AdminChanged(address,address)'(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter

    'Approval(address,address,uint256)'(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter

    'ApprovalForAll(address,address,bool)'(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter

    'BeaconUpgraded(address)'(beacon?: string | null): BeaconUpgradedEventFilter
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter

    'CancelRecovery(address,uint256)'(
      by?: string | null,
      tokenId?: BigNumberish | null
    ): CancelRecoveryEventFilter
    CancelRecovery(
      by?: string | null,
      tokenId?: BigNumberish | null
    ): CancelRecoveryEventFilter

    'ChangeFee(uint256)'(fee?: null): ChangeFeeEventFilter
    ChangeFee(fee?: null): ChangeFeeEventFilter

    'ChangePool(address)'(pool?: string | null): ChangePoolEventFilter
    ChangePool(pool?: string | null): ChangePoolEventFilter

    'ChangeRecoveryAddress(uint256,address)'(
      tokenId?: BigNumberish | null,
      recovery?: string | null
    ): ChangeRecoveryAddressEventFilter
    ChangeRecoveryAddress(
      tokenId?: BigNumberish | null,
      recovery?: string | null
    ): ChangeRecoveryAddressEventFilter

    'ChangeTrustedCaller(address)'(
      trustedCaller?: string | null
    ): ChangeTrustedCallerEventFilter
    ChangeTrustedCaller(
      trustedCaller?: string | null
    ): ChangeTrustedCallerEventFilter

    'ChangeVault(address)'(vault?: string | null): ChangeVaultEventFilter
    ChangeVault(vault?: string | null): ChangeVaultEventFilter

    'DisableTrustedOnly()'(): DisableTrustedOnlyEventFilter
    DisableTrustedOnly(): DisableTrustedOnlyEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'Invite(uint256,uint256,bytes16)'(
      inviterId?: BigNumberish | null,
      inviteeId?: BigNumberish | null,
      fname?: BytesLike | null
    ): InviteEventFilter
    Invite(
      inviterId?: BigNumberish | null,
      inviteeId?: BigNumberish | null,
      fname?: BytesLike | null
    ): InviteEventFilter

    'Paused(address)'(account?: null): PausedEventFilter
    Paused(account?: null): PausedEventFilter

    'Renew(uint256,uint256)'(
      tokenId?: BigNumberish | null,
      expiry?: null
    ): RenewEventFilter
    Renew(tokenId?: BigNumberish | null, expiry?: null): RenewEventFilter

    'RequestRecovery(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): RequestRecoveryEventFilter
    RequestRecovery(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): RequestRecoveryEventFilter

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter

    'Unpaused(address)'(account?: null): UnpausedEventFilter
    Unpaused(account?: null): UnpausedEventFilter

    'Upgraded(address)'(implementation?: string | null): UpgradedEventFilter
    Upgraded(implementation?: string | null): UpgradedEventFilter
  }

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    bid(
      to: string,
      tokenId: BigNumberish,
      recovery: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    cancelRecovery(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    changeFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    changePool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    changeRecoveryAddress(
      tokenId: BigNumberish,
      recovery: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    changeTrustedCaller(
      _trustedCaller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    changeVault(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    completeRecovery(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    disableTrustedOnly(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    expiryOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    fee(overrides?: CallOverrides): Promise<BigNumber>

    generateCommit(
      fname: BytesLike,
      to: string,
      secret: BytesLike,
      recovery: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initialize(
      _tokenName: string,
      _tokenSymbol: string,
      _vault: string,
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    makeCommit(
      commit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    pool(overrides?: CallOverrides): Promise<BigNumber>

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>

    reclaim(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    recoveryClockOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    recoveryDestinationOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    recoveryOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    register(
      fname: BytesLike,
      to: string,
      secret: BytesLike,
      recovery: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    renew(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    requestRecovery(
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    timestampOf(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    trustedCaller(overrides?: CallOverrides): Promise<BigNumber>

    trustedOnly(overrides?: CallOverrides): Promise<BigNumber>

    trustedRegister(
      fname: BytesLike,
      to: string,
      recovery: string,
      inviter: BigNumberish,
      invitee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    vault(overrides?: CallOverrides): Promise<BigNumber>

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    bid(
      to: string,
      tokenId: BigNumberish,
      recovery: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    cancelRecovery(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    changeFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    changePool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    changeRecoveryAddress(
      tokenId: BigNumberish,
      recovery: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    changeTrustedCaller(
      _trustedCaller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    changeVault(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    completeRecovery(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    disableTrustedOnly(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    expiryOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    generateCommit(
      fname: BytesLike,
      to: string,
      secret: BytesLike,
      recovery: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initialize(
      _tokenName: string,
      _tokenSymbol: string,
      _vault: string,
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    makeCommit(
      commit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>

    reclaim(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    recoveryClockOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    recoveryDestinationOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    recoveryOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    register(
      fname: BytesLike,
      to: string,
      secret: BytesLike,
      recovery: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    renew(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    requestRecovery(
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    timestampOf(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    trustedCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>

    trustedOnly(overrides?: CallOverrides): Promise<PopulatedTransaction>

    trustedRegister(
      fname: BytesLike,
      to: string,
      recovery: string,
      inviter: BigNumberish,
      invitee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
