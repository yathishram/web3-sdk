/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export interface IdRegistryInterface extends utils.Interface {
  contractName: 'IdRegistry'
  functions: {
    'cancelRecovery(address)': FunctionFragment
    'changeHome(string)': FunctionFragment
    'changeRecoveryAddress(address)': FunctionFragment
    'changeTrustedCaller(address)': FunctionFragment
    'completeRecovery(address)': FunctionFragment
    'completeTransferOwnership()': FunctionFragment
    'disableTrustedOnly()': FunctionFragment
    'idOf(address)': FunctionFragment
    'isTrustedForwarder(address)': FunctionFragment
    'owner()': FunctionFragment
    'register(address,address,string)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'requestRecovery(address,address)': FunctionFragment
    'requestTransferOwnership(address)': FunctionFragment
    'transfer(address)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'trustedRegister(address,address,string)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'cancelRecovery',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'changeHome', values: [string]): string
  encodeFunctionData(
    functionFragment: 'changeRecoveryAddress',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'changeTrustedCaller',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'completeRecovery',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'completeTransferOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'disableTrustedOnly',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'idOf', values: [string]): string
  encodeFunctionData(
    functionFragment: 'isTrustedForwarder',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'register',
    values: [string, string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'requestRecovery',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'requestTransferOwnership',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'transfer', values: [string]): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'trustedRegister',
    values: [string, string, string]
  ): string

  decodeFunctionResult(
    functionFragment: 'cancelRecovery',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'changeHome', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'changeRecoveryAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'changeTrustedCaller',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'completeRecovery',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'completeTransferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'disableTrustedOnly',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'idOf', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isTrustedForwarder',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'register', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'requestRecovery',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'requestTransferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'trustedRegister',
    data: BytesLike
  ): Result

  events: {
    'CancelRecovery(address,uint256)': EventFragment
    'ChangeHome(uint256,string)': EventFragment
    'ChangeRecoveryAddress(uint256,address)': EventFragment
    'ChangeTrustedCaller(address)': EventFragment
    'DisableTrustedOnly()': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Register(address,uint256,address,string)': EventFragment
    'RequestRecovery(address,address,uint256)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'CancelRecovery'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ChangeHome'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ChangeRecoveryAddress'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ChangeTrustedCaller'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DisableTrustedOnly'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Register'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RequestRecovery'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
}

export type CancelRecoveryEvent = TypedEvent<
  [string, BigNumber],
  { by: string; id: BigNumber }
>

export type CancelRecoveryEventFilter = TypedEventFilter<CancelRecoveryEvent>

export type ChangeHomeEvent = TypedEvent<
  [BigNumber, string],
  { id: BigNumber; url: string }
>

export type ChangeHomeEventFilter = TypedEventFilter<ChangeHomeEvent>

export type ChangeRecoveryAddressEvent = TypedEvent<
  [BigNumber, string],
  { id: BigNumber; recovery: string }
>

export type ChangeRecoveryAddressEventFilter =
  TypedEventFilter<ChangeRecoveryAddressEvent>

export type ChangeTrustedCallerEvent = TypedEvent<
  [string],
  { trustedCaller: string }
>

export type ChangeTrustedCallerEventFilter =
  TypedEventFilter<ChangeTrustedCallerEvent>

export type DisableTrustedOnlyEvent = TypedEvent<[], {}>

export type DisableTrustedOnlyEventFilter =
  TypedEventFilter<DisableTrustedOnlyEvent>

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export type RegisterEvent = TypedEvent<
  [string, BigNumber, string, string],
  { to: string; id: BigNumber; recovery: string; url: string }
>

export type RegisterEventFilter = TypedEventFilter<RegisterEvent>

export type RequestRecoveryEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; id: BigNumber }
>

export type RequestRecoveryEventFilter = TypedEventFilter<RequestRecoveryEvent>

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; id: BigNumber }
>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface IdRegistry extends BaseContract {
  contractName: 'IdRegistry'
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: IdRegistryInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    cancelRecovery(
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    changeHome(
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    changeRecoveryAddress(
      recovery: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    changeTrustedCaller(
      _trustedCaller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    completeRecovery(
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    completeTransferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    disableTrustedOnly(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    idOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    owner(overrides?: CallOverrides): Promise<[string]>

    register(
      to: string,
      recovery: string,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    requestRecovery(
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    requestTransferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transfer(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferOwnership(arg0: string, overrides?: CallOverrides): Promise<[void]>

    trustedRegister(
      to: string,
      recovery: string,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  cancelRecovery(
    from: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  changeHome(
    url: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  changeRecoveryAddress(
    recovery: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  changeTrustedCaller(
    _trustedCaller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  completeRecovery(
    from: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  completeTransferOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  disableTrustedOnly(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  idOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  owner(overrides?: CallOverrides): Promise<string>

  register(
    to: string,
    recovery: string,
    url: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  requestRecovery(
    from: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  requestTransferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  transfer(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  transferOwnership(arg0: string, overrides?: CallOverrides): Promise<void>

  trustedRegister(
    to: string,
    recovery: string,
    url: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    cancelRecovery(from: string, overrides?: CallOverrides): Promise<void>

    changeHome(url: string, overrides?: CallOverrides): Promise<void>

    changeRecoveryAddress(
      recovery: string,
      overrides?: CallOverrides
    ): Promise<void>

    changeTrustedCaller(
      _trustedCaller: string,
      overrides?: CallOverrides
    ): Promise<void>

    completeRecovery(from: string, overrides?: CallOverrides): Promise<void>

    completeTransferOwnership(overrides?: CallOverrides): Promise<void>

    disableTrustedOnly(overrides?: CallOverrides): Promise<void>

    idOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    owner(overrides?: CallOverrides): Promise<string>

    register(
      to: string,
      recovery: string,
      url: string,
      overrides?: CallOverrides
    ): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    requestRecovery(
      from: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>

    requestTransferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    transfer(to: string, overrides?: CallOverrides): Promise<void>

    transferOwnership(arg0: string, overrides?: CallOverrides): Promise<void>

    trustedRegister(
      to: string,
      recovery: string,
      url: string,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    'CancelRecovery(address,uint256)'(
      by?: string | null,
      id?: BigNumberish | null
    ): CancelRecoveryEventFilter
    CancelRecovery(
      by?: string | null,
      id?: BigNumberish | null
    ): CancelRecoveryEventFilter

    'ChangeHome(uint256,string)'(
      id?: BigNumberish | null,
      url?: null
    ): ChangeHomeEventFilter
    ChangeHome(id?: BigNumberish | null, url?: null): ChangeHomeEventFilter

    'ChangeRecoveryAddress(uint256,address)'(
      id?: BigNumberish | null,
      recovery?: string | null
    ): ChangeRecoveryAddressEventFilter
    ChangeRecoveryAddress(
      id?: BigNumberish | null,
      recovery?: string | null
    ): ChangeRecoveryAddressEventFilter

    'ChangeTrustedCaller(address)'(
      trustedCaller?: string | null
    ): ChangeTrustedCallerEventFilter
    ChangeTrustedCaller(
      trustedCaller?: string | null
    ): ChangeTrustedCallerEventFilter

    'DisableTrustedOnly()'(): DisableTrustedOnlyEventFilter
    DisableTrustedOnly(): DisableTrustedOnlyEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter

    'Register(address,uint256,address,string)'(
      to?: string | null,
      id?: BigNumberish | null,
      recovery?: null,
      url?: null
    ): RegisterEventFilter
    Register(
      to?: string | null,
      id?: BigNumberish | null,
      recovery?: null,
      url?: null
    ): RegisterEventFilter

    'RequestRecovery(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      id?: BigNumberish | null
    ): RequestRecoveryEventFilter
    RequestRecovery(
      from?: string | null,
      to?: string | null,
      id?: BigNumberish | null
    ): RequestRecoveryEventFilter

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      id?: BigNumberish | null
    ): TransferEventFilter
    Transfer(
      from?: string | null,
      to?: string | null,
      id?: BigNumberish | null
    ): TransferEventFilter
  }

  estimateGas: {
    cancelRecovery(
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    changeHome(
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    changeRecoveryAddress(
      recovery: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    changeTrustedCaller(
      _trustedCaller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    completeRecovery(
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    completeTransferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    disableTrustedOnly(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    idOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    register(
      to: string,
      recovery: string,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    requestRecovery(
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    requestTransferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    transfer(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    transferOwnership(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    trustedRegister(
      to: string,
      recovery: string,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    cancelRecovery(
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    changeHome(
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    changeRecoveryAddress(
      recovery: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    changeTrustedCaller(
      _trustedCaller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    completeRecovery(
      from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    completeTransferOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    disableTrustedOnly(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    idOf(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    register(
      to: string,
      recovery: string,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    requestRecovery(
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    requestTransferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    transfer(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    trustedRegister(
      to: string,
      recovery: string,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
